(* Librariile necesare pentru string-uri *)
Require Import Strings.String.
Local Open Scope string_scope.
Local Open Scope list_scope.
Scheme Equality for string. (* Creaza functia de egalitate pe string-uri automat *)

(* Liste si notatiile pentru ele *)
Local Open Scope list_scope.

Inductive Number_Value :=
| error_number : Number_Value
| Cnum : nat -> Number_Value. 

Coercion Cnum: nat >-> Number_Value.

(* Expresii aritmetice *)
Inductive AExp :=
| avar: string -> AExp 
| acon: Number_Value -> AExp
| aplus: AExp -> AExp -> AExp
| asub: AExp -> AExp -> AExp
| amul: AExp -> AExp -> AExp 
| adiv: AExp -> AExp -> AExp 
| amod: AExp -> AExp -> AExp.

Coercion avar: string >-> AExp.
Coercion acon: Number_Value >-> AExp. 

(* Notatiile pentru operatiile aritmetice *)
Notation "A +a B" := (aplus A B)(at level 50, left associativity).
Notation "A -a B" := (asub A B)(at level 50, left associativity).
Notation "A *a B" := (amul A B)(at level 48, left associativity).
Notation "A \a B" := (adiv A B)(at level 48, left associativity).
Notation "A %a B" := (amod A B)(at level 45, left associativity).

Definition Aplus (x : Number_Value) (y : Number_Value) : Number_Value :=
match x, y with
| Cnum x', Cnum y' => Cnum (x' + y')
| _ , _ => error_number
end.

Definition Asub (x : Number_Value) (y : Number_Value) : Number_Value :=
match x, y with
| Cnum x', Cnum y' => if(Nat.ltb x' y')
                      then error_number
                      else Cnum (x' - y')
| _ , _ => error_number
end.

Definition Amul (x : Number_Value) (y : Number_Value) : Number_Value :=
match x, y with
| Cnum x', Cnum y' => Cnum (x' * y')
| _ , _ => error_number
end.

Definition Adiv (x : Number_Value) (y : Number_Value) : Number_Value :=
match x, y with
| Cnum x', Cnum y' => match x', y' with
                      | x'', 0 => error_number
                      | x'', y'' => Cnum(Nat.div x'' y'')
                      end
| _ , _ => error_number
end.

Definition Amod (x : Number_Value) (y : Number_Value) : Number_Value :=
match x, y with
| Cnum x', Cnum y' => if (Nat.leb y' 0) 
                      then error_number
                      else  Cnum (Nat.modulo x' y'  )
| _ , _ => error_number
end.

Compute (Amod (Cnum 1) (Cnum 2)).

Inductive Boolean_Value :=
| error_bool : Boolean_Value
| Cbool : bool -> Boolean_Value.

Coercion Cbool : bool >-> Boolean_Value.

(* Expresii boolene *)
Inductive BExp :=
| bvar : string -> BExp
| bcon: Boolean_Value -> BExp
| begal: AExp -> AExp -> BExp
| blt : AExp -> AExp -> BExp
| bnot : BExp -> BExp
| band : BExp -> BExp -> BExp
| bor : BExp -> BExp -> BExp.

Coercion bvar : string >-> BExp.
Coercion bcon : Boolean_Value >-> BExp.

(* Notations used for boolean operations *)
Notation "A <b B" := (blt A B) (at level 50).
Notation "A ==b B" := (begal A B) (at level 50).
Notation "!b A" := (bnot A)(at level 51, left associativity).
Notation "A &&b B" := (band A B)(at level 52, left associativity).
Notation "A ||b B" := (bor A B)(at level 53, left associativity).

Definition Begal (x : Number_Value) (y : Number_Value) : Boolean_Value :=
match x, y with
| Cnum x', Cnum y' => if ( Nat.eqb x' y')
                      then (Cbool true)
                      else (Cbool false )
| _ , _ => error_bool
end.

Definition Blt (x : Number_Value) (y : Number_Value) : Boolean_Value :=
match x, y with
| Cnum x', Cnum y' => if ( Nat.ltb x' y')
                      then (Cbool true)
                      else (Cbool false )
| _ , _ => error_bool
end.


Definition Bnot (x : Boolean_Value)  : Boolean_Value :=
match x with
| Cbool true => Cbool false
| Cbool false => Cbool true
| _ => error_bool
end.

Definition Band (x : Boolean_Value) (y : Boolean_Value) : Boolean_Value :=
match x, y with
| (Cbool true), (Cbool true) => Cbool true 
| (Cbool true), (Cbool false) => Cbool false
| (Cbool false), (Cbool true) => Cbool false
| (Cbool false), (Cbool false) => Cbool false 
| _ , _ => error_bool
end.

Definition Bor (x : Boolean_Value) (y : Boolean_Value) : Boolean_Value :=
match x, y with
| (Cbool true), (Cbool true) => Cbool true 
| (Cbool true), (Cbool false) => Cbool true
| (Cbool false), (Cbool true) => Cbool true
| (Cbool false), (Cbool false) => Cbool false 
| _ , _ => error_bool
end.

Inductive String_Value :=
| error_string : String_Value
| Cstring : string -> String_Value.

Coercion Cstring : string >-> String_Value.

(* Expresii string-uri *)
Inductive STExp :=
| svar : string -> STExp
| scon : String_Value -> STExp
| sconcat : STExp ->STExp -> STExp
| smul : STExp -> nat -> STExp.

Coercion svar : string >-> STExp.
(*Coercion scon : String_Value >-> STExp.*)

Notation "A +Us+ B" := (sconcat A B)(at level 70).
Notation "A *** B" := (smul A B)(at level 70).

Definition Sconcat (S1 : String_Value) (S2 : String_Value) : String_Value :=
match S1, S2 with
| Cstring S1', Cstring S2' => Cstring (S1' ++ S2')
| _, _ => error_string
end.

Fixpoint Sm (s : String_Value) (x : nat) : String_Value :=
match x with
| O => (Cstring "")
| S x' => Sconcat s ( Sm s x')
end.

Definition Smul (S1 : String_Value) (x : nat) : String_Value :=
match S1, x with
| Cstring S1', x' => if (Nat.leb x' 1)
                     then error_string
                     else Sm (Cstring S1') x'
| _, _ => error_string
end.

Compute Smul (Cstring "alin_") (5).

Inductive Array_Value :=
| error_array : Array_Value
| start_array : Array_Value
| Carray : Array_Value -> nat -> Array_Value.

(* Expresii vectori *)
Inductive VExp :=
| vvar : string -> VExp
| vcon : Array_Value -> VExp
| vadd : VExp -> nat -> VExp
| vmull : VExp -> nat -> VExp
| vmin : VExp -> nat -> VExp
| vsuply : VExp -> nat -> VExp
| vconcat : VExp -> VExp -> VExp.

Coercion vvar : string >-> VExp.
Coercion vcon : Array_Value >-> VExp.


Notation "A +v B" := (vadd A B)(at level 70).
Notation "A *v B" := (vmull A B)(at level 70).
Notation "A -v B" := (vmin A B)(at level 70).
Notation "A +Uv B" := (vsuply A B)(at level 70).
Notation "A +Uv+ B" := (vconcat A B)(at level 70).

Definition Vsuply (V1 : Array_Value) (x : nat) : Array_Value :=
match V1 with
| Carray V1' a => (Carray (Carray V1' a) x)
| start_array => (Carray start_array x)
| _ => error_array
end.

(*Definition adit := Vadd (Carray start_array 5) 7. Print adit.*)

Fixpoint Vmull (V1 : Array_Value) (x : nat) : Array_Value :=
match V1 with
| Carray start_array z => (Carray start_array (x*z))
| Carray V1' a => (Carray (Vmull V1' x) (a*x))
| _ => error_array
end. 

Compute Vmull (Carray (Carray (Carray (Carray start_array 3) 2) 10) 7) 5.

Fixpoint Vadd (V1 : Array_Value) (x : nat) : Array_Value :=
match V1 with
| Carray start_array z => (Carray start_array (x+z))
| Carray V1' a => (Carray (Vadd V1' x) (a+x))
| _ => error_array
end. 

Fixpoint exists_lower (V1 : Array_Value) (x : nat) : bool :=
match V1 with
| Carray start_array z => if(Nat.ltb z x)
                          then true
                          else
                               false
| Carray V1' a => if(Nat.ltb a x)
                  then true
                  else (exists_lower V1' x)
| _ => false
end.
Fixpoint Vmin (V1 : Array_Value) (x : nat) : Array_Value :=
if( exists_lower V1 x )
then error_array
else 
    match V1 with
    | Carray start_array z =>  (Carray start_array (z-x))
    | Carray V1' a => (Carray (Vmin V1' x) (a-x))
    | _ => error_array
end. 

Compute Vmin (Carray (Carray (Carray (Carray start_array 4) 5) 10) 7) 5.

Fixpoint Vconcat (V1 : Array_Value) (V2 : Array_Value) : Array_Value := 
match V1,V2 with
| error_array, _ => error_array
| _ , error_array => error_array 
| V1', Carray v a => Vsuply (Vconcat V1' v) a (* Vconcat (Vsupply V1' a) v === FOR REVERSE CONCAT*)
| V1' , start_array => V1'
end. 

Compute Vconcat (Carray (Carray (Carray (Carray start_array 4) 5) 10) 7) (Carray (Carray start_array 5) 7). 

(* Sectiunea pentru statement-uri *)
Inductive Stmt :=
| number_decl: string -> AExp -> Stmt  
| bool_decl: string -> BExp -> Stmt  
| string_decl: string -> STExp -> Stmt
| array_decl: string -> VExp -> Stmt
| number_assign : string -> AExp -> Stmt
| bool_assign : string -> BExp -> Stmt
| string_assign : string -> STExp -> Stmt
| array_assign : string -> STExp -> Stmt
| sequence : Stmt -> Stmt -> Stmt
| while : BExp -> Stmt -> Stmt
| do_while: Stmt -> BExp -> Stmt
| for_ : Stmt -> BExp -> Stmt -> Stmt -> Stmt
| break : Stmt
| continue : Stmt
| ifthenelse : BExp -> Stmt -> Stmt -> Stmt
| ifthen : BExp -> Stmt -> Stmt
| function_decl : string -> list Stmt -> Stmt -> Stmt
| function_call : string -> Stmt
| case : AExp -> Stmt -> Stmt
| switch_case : AExp -> Stmt -> Stmt.


(* Notations for Statements *)
Notation "X :n= A" := (number_assign X A)(at level 90).
Notation "X :b= A" := (bool_assign X A)(at level 90).
Notation "X :s= A" := (string_decl X A)(at level 90).
Notation "X :a= A" := (array_decl X A)(at level 90).
Notation "'INat' X ::= A" := (number_decl X A)(at level 90).
Notation "'IBool' X ::= A" := (bool_decl X A)(at level 90).
Notation "'IArr' X ::= A" := (array_decl X A)(at level 90).
Notation "'IStr' X ::= A" := (string_decl X A)(at level 90).
Notation "S1 ;; S2" := (sequence S1 S2) (at level 93, right associativity).
Notation "'FOR' A '~~' B '~~' C '{' S '}'" := (for_ A B C S) (at level 90).
Notation "'IF_' B 'THEN_' S" := (ifthen B S) (at level 90).
Notation "'IF' B 'THEN' S1 'ELSE' S2" :=(ifthenelse B S1 S2)(at level 50).
Notation "'DO_WHILE' '<<<<' S '>>>>' B" :=(do_while S B)(at level 89).
Notation "'WHILE' B '{' S '}'" := (while B S)(at level 89).

Notation "'CALL' ? S ?" := (function_call S)(at level 90).
Notation "'function' N '&' L '&' '{' S '}'" := (function_decl N L S) (at level 91).


Module ListNotations.
Notation "[ ]" := nil. 
Notation "[ x ; .. ; y ]" := (cons x .. (cons y nil) ..).

Notation "'CASE' '@' N '@'  '#' S '#'" := (case N S) (at level 90).
Notation "'SWITCH' '(' A ')' '{' B '}'" := (switch_case A B)(at level 90).


Definition Program :=
  "b" :b= bcon (Cbool true) ;;
  "a" :n= 15 -a "b" ;;
  "string" :s= "text" +Us+ " ajutator" ;;
  "array" :a= Carray (Carray (Carray start_array 3) 9) 5 ;;
  INat "a"  ::= 13 ;;
  IBool "b" ::= ("a" ==b 0) ;;
  IArr "array" ::= "array" +Uv+ "array"  ;;
  IStr "ceva" ::= "mai" ;;
  function "do_something"  & [ INat "c" ::= 0 ] &  { "b" :b= bcon (Cbool false) } ;;
  function "main" & [] &
  {
    IF ( "c" ==b 15 )
    THEN ( "c" :n= "c" +a 1 )
    ELSE
        ( "b" :b= bcon (Cbool false ) ) ;;
    SWITCH ( "c" ) 
        {  (CASE @ 5 @ # INat "a" ::= 13 #) ;; 
            (CASE @ 10 @ # INat "a" ::= 15 #)  
        } ;; 
    DO_WHILE <<<< (break ;; continue) >>>> ("a" ==b 3) ;;
    CALL ? "do_something" ? ;;
    IF_ ( "a" <b "d" )
    THEN_ ( "array" :a= Carray(Carray start_array 3) 5) 
  }
.   

Inductive Result :=
| err_undecl : Result
| err_assign : Result
| default : Result
| res_nat : Number_Value -> Result
| res_bool : Boolean_Value -> Result
| res_string : String_Value -> Result
| res_array : Array_Value -> Result
| code : Stmt -> Result.
(* The functions' names are mapped to the code inside the function *)

Definition check_eq_over_types (t1 : Result) (t2 : Result) : bool :=
  match t1 with
  | err_assign => match t2 with 
                    | err_assign => true
                    | _ => false
                     end
  | err_undecl => match t2 with
                    | err_undecl => true
                    | _ => false
                     end
  | default => match t2 with
                 | default => true
                 | _ => false
               end
  | res_nat _x => match t2 with
                     | res_nat _y => true
                     | _ => false
                  end
  | res_bool _x => match t2 with
                     | res_bool _y => true
                     | _ => false
                  end
  | res_string _x => match t2 with
                     | res_string _y => true
                     | _ => false
                  end  
  | res_array _x => match t2 with
                     | res_array _y => true
                     | _ => false
                  end 
  | code _x => match t2 with
                     | code _y => true
                     | _ => false
                  end 
end.

Inductive Memory_space :=
| mem_default : Memory_space
| offset : nat -> Memory_space. (* offset which indicates the current number of memory zones *)

Scheme Equality for Memory_space.

(* Environment *)
Definition Env := string -> Memory_space.

Definition base_env : Env := fun x => mem_default.

Compute base_env "string".

(* Memory Layer *)
Definition Memory_object := Memory_space -> Result.

Definition base_memory : Memory_object  := fun x => default.

(* Pentru un anumit string pune un nou offset *)
Definition update_env (env: Env) (x: string) (n: Memory_space) : Env :=
  fun y =>
      (* If the variable has assigned a default memory zone, 
         then it will be updated with the current memory offset *)
      if (andb (string_beq x y ) (Memory_space_beq (env y) mem_default))
      then
        n
      else
        (env y).

Definition new := update_env base_env "string" (offset 1).
Definition newb := update_env new "ex_bool" (offset 2).
Compute new "string".
Compute newb "ex_bool".
Definition update_mem (object : Memory_object) (env : Env) (x : string) (space : Memory_space) (v : Result) : Memory_object :=
  fun y =>
    if(andb (Memory_space_beq y space) (Memory_space_beq (env x) space))
    then
      if(andb (check_eq_over_types err_undecl (object y)) (negb (check_eq_over_types default v)) )
      then
          err_undecl 
      else
        if( andb (check_eq_over_types err_undecl (object y)) (check_eq_over_types default v))
        then default
        else
          if( orb (check_eq_over_types default (object y)) (check_eq_over_types v (object y)) )
          then v
          else err_assign
    else (object y).

Definition what := update_mem base_memory new "string" (offset 1) (res_nat (Cnum 5)).
Definition whatbool := update_mem what newb "ex_bool" (offset 2) (res_bool (Cbool true) ).

Compute what (new "string").
Compute whatbool (newb "ex_bool").

Inductive position :=|pos : nat -> position. 
Definition start : position := pos 0. (* Last memory zone *)

Definition upper (x : position) : position :=  
match x with
| pos x' => pos (x' + 1)
end.

Definition lower (x : position) : position :=  
match x with
| pos x' => pos (x' - 1)
end.

Definition Stack := list Env.

(* Configuration *)
Inductive Config := | cons_config : position -> Env -> Memory_object -> Config.
  (* nat: last memory zone
     Env: environment
     MemLayer: memory layer
     Stack: stack 
  *)



Definition update_configuration ( c : Config ) ( env : Env ) (obj : Memory_object) : Config :=
match c with 
| (cons_config (pos p) e o) => (cons_config (upper(pos p)) env obj) 
end. 
(*
Definition update_configuration ( p : position ) ( env : Env) ( space : Memory_Space ) :=.
(* Pay attention!!! In order to be able to monitor the state of the entire program, you need to
   implement a function "update_conf", which updates the 
   entire configuration (environment, memory layout and stack).  
   config : nat -> Env -> MemLayer -> Stack -> Config (the first value represents the last memory zone, 
   and you will need to find a way to increment it each time a new variable/function is declared)
*)
*)


(* Notatations used for the Big-Step semantics *)
Reserved Notation "A =[ E '___' M ]=> N" (at level 70).

Inductive aeval : AExp -> Env -> Memory_object -> Number_Value -> Prop :=
| const : forall n env mem, acon n =[ env ___ mem ]=> n
| var : forall v env mem, avar v =[ env ___ mem ]=>  match (env v) with
                                                    | offset x => match mem (offset x) with
                                                                  | res_nat x' => x'
                                                                  | _ => error_number
                                                                  end
                                                    | _ => error_number
                                                    end
| add : forall a1 a2 i1 i2 env mem n,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    n = (Aplus i1 i2) ->
    a1 +a a2 =[ env ___ mem ]=> n
| times : forall a1 a2 i1 i2 env mem n,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    n = (Amul i1 i2) ->
    a1 *a a2 =[ env ___ mem ]=> n
| substract : forall a1 a2 i1 i2 env mem n,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    n = (Asub i1 i2) ->
    a1 -a a2 =[ env ___ mem ]=> n
| division : forall a1 a2 i1 i2 env mem n,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    n = (Adiv i1 i2) ->
    a1 \a a2 =[ env ___ mem ]=> n
| modulo : forall a1 a2 i1 i2 env mem n,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    n = (Amod i1 i2) ->
    a1 %a a2 =[ env ___ mem ]=> n
where "a =[ env '___' mem ]=> n" := (aeval a env mem n).

Example number_aexp : acon (Cnum 5) =[ new ___ base_memory ]=> (Cnum 5).
Proof.
  eapply const.
Qed.
Example string_aexp : avar "string" =[ new ___ what ]=> (Cnum 5).
Proof.
  eapply var.
Qed.

Example substract_error : (acon (Cnum 1)) -a (acon (Cnum 5)) =[ new ___ what ]=> error_number.
Proof.
  eapply substract.
  - apply const.
  - apply const.
  - simpl. reflexivity.
Qed.

Example substract_string : avar "string" %a (acon (Cnum 5)) =[ new ___ what ]=> (Cnum 0).
Proof.
  eapply modulo.
  - apply var.
  - apply const.
  - simpl. reflexivity.
Qed.


Reserved Notation "B ={ E _=_ M }=> B'" (at level 70).
Inductive beval : BExp -> Env -> Memory_object -> Boolean_Value -> Prop :=
| b_con : forall c env mem, bcon c ={ env _=_ mem }=> c 
| b_var : forall v env mem, bvar v ={ env _=_ mem }=>  match (env v) with
                                                    | offset x => match mem (offset x) with
                                                                  | res_bool x' => x'
                                                                  | _ => error_bool
                                                                  end
                                                    | _ => error_bool
                                                    end
| b_lessthan : forall a1 a2 i1 i2 env mem b,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    b = (Blt i1 i2) ->
    a1 <b a2 ={ env _=_ mem }=> b
| b_egal : forall a1 a2 i1 i2 env mem b,
    a1 =[ env ___ mem ]=> i1 ->
    a2 =[ env ___ mem ]=> i2 ->
    b = (Begal i1 i2) ->
    a1 ==b a2 ={ env _=_ mem }=> b
| b_not : forall a1 i1 env mem b,
    a1 ={ env _=_  mem }=> i1 ->
    b = (Bnot i1) ->
    !b a1 ={ env _=_ mem }=> b
| b_and : forall a1 a2 i1 i2 env mem b,
    a1 ={ env _=_  mem }=> i1 ->
    a2 ={ env _=_  mem }=> i2 ->
    b = (Band i1 i2) ->
    (a1 &&b a2) ={ env _=_  mem }=> b 
| b_or : forall a1 a2 i1 i2 env mem b,
    a1 ={ env _=_  mem }=> i1 ->
    a2 ={ env _=_  mem }=> i2 ->
    b = (Bor i1 i2) ->
    (a1 ||b a2) ={ env _=_  mem }=> b 
where "B ={ env _=_ mem }=> B'" := (beval B env mem B').

Example bool_Bexp : (bcon (Cbool true)) ={ new _=_ what }=> (Cbool true).
Proof.
  eapply b_con.
Qed.

Example string_error_Bexp : (bvar "string" ) ={ new _=_ what }=> error_bool.
Proof.
  eapply b_var.
Qed.

Example complex_Bexp : ((((acon (Cnum 5)) <b (acon (Cnum 7))) &&b (bvar "ex_bool"))
 ||b ((avar "string") ==b (acon (Cnum 5)))) ={ newb _=_ whatbool }=> (Cbool true).
Proof.
  eapply b_or.
  - eapply b_and.
    -- eapply b_lessthan.
      --- eapply const.
      --- eapply const.
      --- unfold Blt. simpl. reflexivity.
    -- eapply b_var. 
    -- unfold Band. simpl. reflexivity.
  - eapply b_egal.
    -- eapply var.
    -- eapply const.
    -- unfold Begal. simpl. reflexivity.
  - unfold Bor. reflexivity.
Qed.

Reserved Notation "B =$ E _$_ M $=> B'" (at level 70).
Inductive seval : STExp -> Env -> Memory_object -> String_Value -> Prop :=
| s_con : forall c env mem, scon c =$ env _$_ mem $=> c 
| s_var : forall v env mem, svar v =$ env _$_ mem $=>  match (env v) with
                                                    | offset x => match mem (offset x) with
                                                                  | res_string x' => x'
                                                                  | _ => error_string
                                                                  end
                                                    | _ => error_string
                                                    end
| s_mul : forall a1 i1 n env mem b,
    a1 =$ env _$_  mem $=> i1 ->
    b = (Smul i1 n) ->
    (a1 *** n) =$ env _$_  mem $=> b 
| s_concat : forall a1 a2 i1 i2 env mem b,
    a1 =$ env _$_  mem $=> i1 ->
    a2 =$ env _$_  mem $=> i2 ->
    b = (Sconcat i1 i2) ->
    (a1 +Us+ a2) =$ env _$_  mem $=> b 
where "B =$ env _$_ mem $=> B'" := (seval B env mem B'). 
 
Definition env_ := update_env newb "CAPS" (offset 3).
Definition env2_ := update_env env_ "SECOND" (offset 4).
Definition memstring := update_mem what env_ "CAPS" (offset 3) (res_string (Cstring "save") ).
Definition memstring2 := update_mem memstring env2_ "SECOND" (offset 4) (res_string (Cstring "point") ).

Example working : svar "CAPS" *** 3 =$ env_ _$_ memstring2 $=> (Cstring "savesavesave").
Proof.
    eapply s_mul.
    - eapply s_var.
    - unfold Smul. simpl. reflexivity.
Qed.

Compute memstring2 (env2_ "CAPS").

Example concat : (svar "CAPS") +Us+ (svar "SECOND") =$ env2_ _$_ memstring2 $=> (Cstring "savepoint").
Proof.
    eapply s_concat.
    - eapply s_var.
    - eapply s_var.
    - unfold Sconcat. simpl. reflexivity.
Qed.

Reserved Notation "B =@ T _v> P @=> B'" (at level 70).
Inductive veval : VExp -> Env -> Memory_object -> Array_Value -> Prop :=
| v_con : forall c env mem, vcon c =@ env _v> mem @=> c 
| v_var : forall v env mem, vvar v =@ env _v> mem @=>  match (env v) with
                                                    | offset x => match mem (offset x) with
                                                                  | res_array x' => x'
                                                                  | _ => error_array
                                                                  end
                                                    | _ => error_array
                                                    end
| v_add : forall a1 i1 n env mem b,
    a1 =@ env _v>  mem @=> i1 ->
    b = (Vadd i1 n) ->
    (a1 +v n) =@ env _v>  mem @=> b 
| v_mull : forall a1 i1 n env mem b,
    a1 =@ env _v>  mem @=> i1 ->
    b = (Vmull i1 n) ->
    (a1 *v n) =@ env _v>  mem @=> b 
| v_min : forall a1 i1 n env mem b,
    a1 =@ env _v>  mem @=> i1 ->
    b = (Vmin i1 n) ->
    (a1 -v n) =@ env _v>  mem @=> b 
| v_suply : forall a1 i1 n env mem b,
    a1 =@ env _v>  mem @=> i1 ->
    b = (Vsuply i1 n) ->
    (a1 +Uv n) =@ env _v>  mem @=> b 
| v_concat : forall a1 a2 i1 i2 env mem b, 
    a1 =@ env _v>  mem @=> i1 ->
    a2 =@ env _v>  mem @=> i2 ->
    b = (Vconcat i1 i2) ->
    (a1 +Uv+ a2) =@ env _v>  mem @=> b 
where "B =@ env _v> mem @=> B'" := (veval B env mem B'). 

Definition env3_ := update_env env2_ "vector" (offset 5).

Definition memarray := update_mem memstring2 env3_ "vector" (offset 5) (res_array (Carray (Carray (Carray start_array 5) 7) 2)).

Example Vecconcat : (vvar ("vector")) +Uv+ (vcon (Carray (Carray start_array 9) 7)) =@ env3_ _v> memarray @=> (Carray (Carray (Carray (Carray (Carray start_array 5) 7) 2) 9) 7).
Proof.
     eapply v_concat.
     - eapply v_var.
     - eapply v_con.
     - unfold Vconcat. simpl. reflexivity.
Qed.

Example Vecadd : (vvar "vector") +v 3 =@ env3_ _v> memarray @=> (Carray (Carray (Carray start_array 8) 10) 5).
Proof.
    eapply v_add.
    - eapply v_var.
    - unfold Vadd. simpl. reflexivity.
Qed. 

Example Vecmin : (vvar "vector") -v 3 =@ env3_ _v> memarray @=> error_array.
Proof.
    eapply v_min.
    - eapply v_var.
    - unfold Vmin. simpl. reflexivity.
Qed.

Example Vecmul : (vvar "vector") *v 3 =@ env3_ _v> memarray @=> (Carray (Carray (Carray start_array 15) 21) 6).
Proof.
    eapply v_mull.
    - eapply v_var.
    - unfold Vmull. simpl. reflexivity.
Qed.  

Example Vecsuply : (vvar "vector") +Uv 3 =@ env3_ _v> memarray @=> (Carray (Carray (Carray (Carray start_array 5) 7) 2) 3).
Proof.
    eapply v_suply.
    - eapply v_var.
    - unfold Vsuply. simpl. reflexivity.
Qed.

Reserved Notation "B -{ S }-> B'" (at level 70).

(* Semantica bigstep pt stmt-uri *)
Inductive eval : Stmt -> Config -> Config -> Prop :=
| e_nat_decl: forall a n x p o e obj env config_1 config_2,
   config_1 = (cons_config (pos p) e o) ->
   a =[ e ___ o ]=> n ->
   env = (update_env e x (offset p)) ->
   obj = (update_mem o env x (offset p) (res_nat n)) ->
   config_2 = (update_configuration config_1 env obj) ->
   (x :n= a) -{ config_1 }-> config_2
where "s -{ config_1 }-> config_2" := (eval s config_1 config_2).

Definition progr := "a" :n= 15. 

Definition env : Env := fun x => mem_default.
Definition obj : Memory_object  := fun x => default.
Definition config1 := (cons_config (pos 0) env obj).

Definition beg := (pos 0).
Definition sfar := (pos 1).

Example declaration : exists env1 obj1, progr -{ (cons_config beg env obj) }-> (cons_config sfar env1 obj1).
Proof.
  eexists.
  unfold progr.
  eapply e_nat_decl.
